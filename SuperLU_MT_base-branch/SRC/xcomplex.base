@extract -b Typedef.inc
/*
 * -- SuperLU routine (version 3.0) --
 * Lawrence Berkeley National Lab, Univ. of California Berkeley,
 * and Xerox Palo Alto Research Center.
 * September 10, 2007
 *
 */
/*
 * This file defines common arithmetic operations for complex type.
 */
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include "slu_@(mod_pre)complex.h"


/* Complex Division c = a/b */
void @(pre)_div(@(type) *c, @(type) *a, @(type) *b)
{
    @(mod_type) ratio, den;
    @(mod_type) abr, abi, cr, ci;
  
    if( (abr = b->r) < 0.)
	abr = - abr;
    if( (abi = b->i) < 0.)
	abi = - abi;
    if( abr <= abi ) {
	if (abi == 0) {
	    fprintf(stderr, "@(pre)_div: division by zero\n");
            exit(-1);
	}	  
	ratio = b->r / b->i ;
	den = b->i * (1 + ratio*ratio);
	cr = (a->r*ratio + a->i) / den;
	ci = (a->i*ratio - a->r) / den;
    } else {
	ratio = b->i / b->r ;
	den = b->r * (1 + ratio*ratio);
	cr = (a->r + a->i*ratio) / den;
	ci = (a->i - a->r*ratio) / den;
    }
    c->r = cr;
    c->i = ci;
}


/* Returns sqrt(z.r^2 + z.i^2) */
double @(pre)_abs(@(type) *z)
{
    @(mod_type) temp;
    @(mod_type) real = z->r;
    @(mod_type) imag = z->i;

    if (real < 0) real = -real;
    if (imag < 0) imag = -imag;
    if (imag > real) {
	temp = real;
	real = imag;
	imag = temp;
    }
    if ((real+imag) == real) return(real);
  
    temp = imag/real;
    temp = real*sqrt(1.0 + temp*temp);  /*overflow!!*/
    return (temp);
}


/* Approximates the abs */
/* Returns abs(z.r) + abs(z.i) */
double @(pre)_abs1(@(type) *z)
{
    @(mod_type) real = z->r;
    @(mod_type) imag = z->i;
  
    if (real < 0) real = -real;
    if (imag < 0) imag = -imag;

    return (real + imag);
}

/* Return the exponentiation */
void @(pre)_exp(@(type) *r, @(type) *z)
{
    @(mod_type) expx;

    expx = exp(z->r);
    r->r = expx * cos(z->i);
    r->i = expx * sin(z->i);
}

/* Return the complex conjugate */
@precision SCOMPLEX
void r_cnjg(@(type) *r, @(type) *z)
@precision DCOMPLEX
void d_cnjg(@(type) *r, @(type) *z)
@precision !
{
    r->r = z->r;
    r->i = -z->i;
}

/* Return the imaginary part */
@precision SCOMPLEX
double r_imag(@(type) *z)
@precision DCOMPLEX
double d_imag(@(type) *z)
@precision !
{
    return (z->i);
}


@precision REPLACED_BY_MACRO

/* Complex Addition c = a + b */
void @(pre)_add(@(type) *c, @(type) *a, @(type) *b)
{
    c->r = a->r + b->r;
    c->i = a->i + b->i;
}

/* Complex Subtraction c = a - b */
void @(pre)_sub(@(type) *c, @(type) *a, @(type) *b)
{
    c->r = a->r - b->r;
    c->i = a->i - b->i;
}

/* Complex-Double Multiplication */
void @(pre)@(mod_pre)_mult(@(type) *c, @(type) *a, @(mod_type) *b)
{
    c->r = (a->r * *b);
    c->i = (a->i * *b);
}

/* Complex-Complex Multiplication */
void @(pre)@(pre)_mult(@(type) *c, @(type) *a, @(type) *b)
{
    @(mod_type) cr, ci;
    cr = a->r * b->r - a->i * b->i;
    ci = a->i * b->r + a->r * b->i;
    c->r = cr;
    c->i = ci;
}

/* Returns 1 if *a == *b */
int_t @(pre)_eq(@(type) *a, @(type) *b)
{
    return ( (a->r == b->r) &&  (a->i == b->i) );
}

@precision !
