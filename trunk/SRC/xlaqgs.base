@extract -b Typedef.inc
/*
 * -- SuperLU routine (version 2.0) --
 * Lawrence Berkeley National Lab, Univ. of California Berkeley,
 * and Xerox Palo Alto Research Center.
 * September 10, 2007
 *
 */
/*
 * File name:	@(pre)laqgs.c
 * History:     Modified from LAPACK routine @(PRE)LAQGE
 */
#include <math.h>
#include "p@(pre)sp_defs.h"


void
@(pre)laqgs(SuperMatrix *A, @(mod_type) *r, @(mod_type) *c, 
	@(mod_type) rowcnd, @(mod_type) colcnd, @(mod_type) amax, equed_t *equed)
{
/*
    Purpose   
    =======   

    @(pre)laqgs() equilibrates a general sparse M by N matrix A using the row and   
    scaling factors in the vectors R and C.   

    See supermatrix.h for the definition of 'SuperMatrix' structure.

    Arguments   
    =========   

    A       (input/output) SuperMatrix*
            On exit, the equilibrated matrix.  See EQUED for the form of 
            the equilibrated matrix. The type of A can be:
	    Stype = SLU_NC; Dtype = @(Dtype_PRE); Mtype = SLU_GE.
	    
    R       (input) @(mod_type)*, dimension (A->nrow)
            The row scale factors for A.
	    
    C       (input) @(mod_type)*, dimension (A->ncol)
            The column scale factors for A.
	    
    ROWCND  (input) @(mod_type)
            Ratio of the smallest R(i) to the largest R(i).
	    
    COLCND  (input) @(mod_type)
            Ratio of the smallest C(i) to the largest C(i).
	    
    AMAX    (input) @(mod_type)
            Absolute value of largest matrix entry.
	    
    EQUED   (output) equed_t*
            Specifies the form of equilibration that was done.   
            = NOEQUIL: No equilibration
            = ROW:  Row equilibration, i.e., A has been premultiplied by
                    diag(R).   
            = COL:  Column equilibration, i.e., A has been postmultiplied
                    by diag(C).   
            = BOTH: Both row and column equilibration, i.e., A has been
                    replaced by diag(R) * A * diag(C).   

    Internal Parameters   
    ===================   

    THRESH is a threshold value used to decide if row or column scaling   
    should be done based on the ratio of the row or column scaling   
    factors.  If ROWCND < THRESH, row scaling is done, and if   
    COLCND < THRESH, column scaling is done.   

    LARGE and SMALL are threshold values used to decide if row scaling   
    should be done based on the absolute size of the largest matrix   
    element.  If AMAX > LARGE or AMAX < SMALL, row scaling is done.   

    ===================================================================== 
*/

#define THRESH    (0.1)
    
    /* Local variables */
    NCformat *Astore;
    @(type)   *Aval;
    int i, j, irow;
    @(mod_type) large, small, cj;
@precision DOUBLE DCOMPLEX
    extern double dlamch_(char *);
@precision SINGLE SCOMPLEX
    extern double slamch_(char *);
@precision !
@precision DCOMPLEX SCOMPLEX
    @(mod_type) temp;
@precision !


    /* Quick return if possible */
    if (A->nrow <= 0 || A->ncol <= 0) {
	*equed = NOEQUIL;
	return;
    }

    Astore = A->Store;
    Aval = Astore->nzval;
    
    /* Initialize LARGE and SMALL. */
@precision DOUBLE DCOMPLEX
    small = dlamch_("Safe minimum") / dlamch_("Precision");
@precision SINGLE SCOMPLEX
    small = slamch_("Safe minimum") / slamch_("Precision");
@precision !
    large = 1. / small;

    if (rowcnd >= THRESH && amax >= small && amax <= large) {
	if (colcnd >= THRESH)
	    *equed = NOEQUIL;
	else {
	    /* Column scaling */
	    for (j = 0; j < A->ncol; ++j) {
		cj = c[j];
		for (i = Astore->colptr[j]; i < Astore->colptr[j+1]; ++i) {
@precision DOUBLE SINGLE
		    Aval[i] *= cj;
@precision DCOMPLEX SCOMPLEX
		    @(pre)@(mod_pre)_mult(&Aval[i], &Aval[i], cj);
@precision !
                }
	    }
	    *equed = COL;
	}
    } else if (colcnd >= THRESH) {
	/* Row scaling, no column scaling */
	for (j = 0; j < A->ncol; ++j)
	    for (i = Astore->colptr[j]; i < Astore->colptr[j+1]; ++i) {
		irow = Astore->rowind[i];
@precision DOUBLE SINGLE
		Aval[i] *= r[irow];
@precision DCOMPLEX SCOMPLEX
		@(pre)@(mod_pre)_mult(&Aval[i], &Aval[i], r[irow]);
@precision !
	    }
	*equed = ROW;
    } else {
	/* Row and column scaling */
	for (j = 0; j < A->ncol; ++j) {
	    cj = c[j];
	    for (i = Astore->colptr[j]; i < Astore->colptr[j+1]; ++i) {
		irow = Astore->rowind[i];
@precision DOUBLE SINGLE
		Aval[i] *= cj * r[irow];
@precision DCOMPLEX SCOMPLEX
		temp = cj * r[irow];
		@(pre)@(mod_pre)_mult(&Aval[i], &Aval[i], temp);
@precision !
	    }
	}
	*equed = BOTH;
    }

    return;

} /* @(pre)laqgs */

