@extract -b Typedef.inc
#include "slu_mt_@(pre)defs.h"

int_t
p@(pre)gstrf_snode_bmod(
		   const int_t  pnum,   /* process number */
		   const int_t  jcol,   /* in - current column in the s-node */
		   const int_t  jsupno, /* in */
		   const int_t  fsupc,  /* in - first column in the s-node */
		   @(type)     *dense, /* in */
		   @(type)     *tempv, /* working array */
		   GlobalLU_t *Glu,   /* modified */
		   Gstat_t *Gstat     /* modified */
		   )
{
/*
 * -- SuperLU MT routine (version 2.0) --
 * Lawrence Berkeley National Lab, Univ. of California Berkeley,
 * and Xerox Palo Alto Research Center.
 * September 10, 2007
 *
 * Performs numeric block updates within the relaxed supernode. 
 */

@precision SINGLE DOUBLE
    @(type)      zero = 0.0;
    @(type)      one = 1.0;
    @(type)      none = -1.0;
@precision SCOMPLEX DCOMPLEX
    @(type)      zero = {0.0, 0.0};
    @(type)      one = {1.0, 0.0};
    @(type)      none = {-1.0, 0.0};
@precision !

#if ( MACH==CRAY_PVP )
    _fcd ftcs1, ftcs2, ftcs3;
#endif
#ifdef USE_VENDOR_BLAS    
    int            incx = 1, incy = 1;
    @(type)         alpha = none, beta = one;
#endif
    
    int_t            luptr;
    int              nsupc, nsupr, nrow;
    int_t            isub, irow, i, iptr; 
    register int_t   ufirst, nextlu;
    @(type)         *lusup;
    int_t            *lsub, *xlsub, *xlsub_end, *xlusup, *xlusup_end;
    register float flopcnt;

    lsub       = Glu->lsub;
    xlsub      = Glu->xlsub;
    xlsub_end  = Glu->xlsub_end;
    lusup      = Glu->lusup;
    xlusup     = Glu->xlusup;
    xlusup_end = Glu->xlusup_end;

    nextlu = xlusup[jcol];
    
    /*
     *	Process the supernodal portion of L\U[*,j]
     */
    for (isub = xlsub[fsupc]; isub < xlsub_end[fsupc]; isub++) {
  	irow = lsub[isub];
	lusup[nextlu] = dense[irow];
	dense[irow] = zero;
	++nextlu;
    }

    xlusup_end[jcol] = nextlu;
    
    if ( fsupc < jcol ) {

	luptr = xlusup[fsupc];
	nsupr = xlsub_end[fsupc] - xlsub[fsupc];
	nsupc = jcol - fsupc;	/* Excluding jcol */
	ufirst = xlusup[jcol];	/* Points to the beginning of column
				   jcol in supernode L\U(jsupno). */
	nrow = nsupr - nsupc;
	
@precision SINGLE DOUBLE
        flopcnt = nsupc * (nsupc - 1) + 2 * nrow * nsupc;
@precision SCOMPELX DCOMPLEX
        flopcnt = 4 * nsupc * (nsupc - 1) + 8 * nrow * nsupc;
@precision !
	Gstat->procstat[pnum].fcops += flopcnt;

/*	ops[TRSV] += nsupc * (nsupc - 1);
	ops[GEMV] += 2 * nrow * nsupc;    */

#ifdef USE_VENDOR_BLAS
#if ( MACH==CRAY_PVP )
	ftcs1 = _cptofcd("L", strlen("L"));
	ftcs2 = _cptofcd("N", strlen("N"));
	ftcs3 = _cptofcd("U", strlen("U"));
	@(SC_PRE)TRSV( ftcs1, ftcs2, ftcs3, &nsupc, &lusup[luptr], &nsupr, 
	      &lusup[ufirst], &incx );
	@(SC_PRE)GEMV( ftcs2, &nrow, &nsupc, &alpha, &lusup[luptr+nsupc], &nsupr, 
	      &lusup[ufirst], &incx, &beta, &lusup[ufirst+nsupc], &incy );
#else
	@(pre)trsv_( "L", "N", "U", &nsupc, &lusup[luptr], &nsupr, 
	      &lusup[ufirst], &incx );
	@(pre)gemv_( "N", &nrow, &nsupc, &alpha, &lusup[luptr+nsupc], &nsupr, 
		&lusup[ufirst], &incx, &beta, &lusup[ufirst+nsupc], &incy );
#endif
#else
	@(pre)lsolve ( nsupr, nsupc, &lusup[luptr], &lusup[ufirst] );
	@(pre)matvec ( nsupr, nrow, nsupc, &lusup[luptr+nsupc], 
		 &lusup[ufirst], &tempv[0] );

        /* Scatter tempv[*] into lusup[*] */
	iptr = ufirst + nsupc;
	for (i = 0; i < nrow; i++) {
@precision SINGLE DOUBLE
            lusup[iptr++] -= tempv[i];
@precision SCOMPLEX DCOMPLEX
            @(pre)_sub(&lusup[iptr], &lusup[iptr], &tempv[i]);
            ++iptr;
@precision !
            tempv[i] = zero;
	}
#endif

    }

    return 0;
}
